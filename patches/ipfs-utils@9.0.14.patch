diff --git a/src/fetch.js b/src/fetch.js
index a941d9257d691db2914f0e82d1c439f0f5e6b229..e62e163d9097197a98456e61a099140d893da57d 100644
--- a/src/fetch.js
+++ b/src/fetch.js
@@ -6,13 +6,9 @@
  * @typedef {globalThis.Response} Response
  */
 
-const { isElectronMain } = require('./env')
+const nativeFetch = require('native-fetch')
 
-// use window.fetch if it is available, fall back to node-fetch if not
-let impl = 'native-fetch'
-
-if (isElectronMain) {
-  impl = 'electron-fetch'
-}
-
-module.exports = require(impl)
+module.exports.Headers = nativeFetch.Headers
+module.exports.Request = nativeFetch.Request
+module.exports.Response = nativeFetch.Response
+module.exports.default = nativeFetch.default
diff --git a/src/http/fetch.js b/src/http/fetch.js
index 1a2712989a7326d2e6a398a4ebc803f4a63dbdd7..589acf14243ba25b04b87ec06e06c6ab22e858b0 100644
--- a/src/http/fetch.js
+++ b/src/http/fetch.js
@@ -1,4 +1,4 @@
-'use strict'
+"use strict";
 
 /**
  * @typedef {object} fetchImpl
@@ -8,15 +8,105 @@
  * @property {globalThis.Headers} fetchImpl.Headers
  */
 
-let implName = './fetch.node'
+const {
+  Request,
+  Response,
+  Headers,
+  default: nativeFetch,
+} = require("../fetch");
+// @ts-ignore
+const toStream = require("it-to-stream");
+const { Buffer } = require("buffer");
+/**
+ * @typedef {import('stream').Readable} NodeReadableStream
+ *
+ * @typedef {import('../types').FetchOptions} FetchOptions
+ * @typedef {import('../types').ProgressFn} ProgressFn
+ */
+
+/**
+ * @param {string|Request} url
+ * @param {FetchOptions} [options]
+ * @returns {Promise<Response>}
+ */
+const fetch = (url, options = {}) =>
+  // @ts-ignore
+  nativeFetch(url, withUploadProgress(options));
+
+/**
+ * Takes fetch options and wraps request body to track upload progress if
+ * `onUploadProgress` is supplied. Otherwise returns options as is.
+ *
+ * @param {FetchOptions} options
+ * @returns {FetchOptions}
+ */
+const withUploadProgress = (options) => {
+  const { onUploadProgress, body } = options;
+  if (onUploadProgress && body) {
+    // This works around the fact that electron-fetch serializes `Uint8Array`s
+    // and `ArrayBuffer`s to strings.
+    const content = normalizeBody(body);
+    // @ts-expect-error this is node-fetch
+    const rsp = new Response(content);
+    // @ts-expect-error this is node-fetch
+    const source = iterateBodyWithProgress(
+      /** @type {NodeReadableStream} */ (rsp.body),
+      onUploadProgress
+    );
+    return {
+      ...options,
+      body: toStream.readable(source),
+    };
+  } else {
+    return options;
+  }
+};
 
-if (typeof XMLHttpRequest === 'function') {
-  // Electron has `XMLHttpRequest` and should get the browser implementation
-  // instead of node.
-  implName = './fetch.browser'
-}
+/**
+ * @param {BodyInit | NodeReadableStream} input
+ */
+const normalizeBody = (input) => {
+  if (input instanceof ArrayBuffer) {
+    return Buffer.from(input);
+  } else if (ArrayBuffer.isView(input)) {
+    return Buffer.from(input.buffer, input.byteOffset, input.byteLength);
+  } else if (typeof input === "string") {
+    return Buffer.from(input);
+  }
+  return input;
+};
 
-/** @type {fetchImpl} */
-const fetch = require(implName)
+/**
+ * Takes body from native-fetch response as body and `onUploadProgress` handler
+ * and returns async iterable that emits body chunks and emits
+ * `onUploadProgress`.
+ *
+ * @param {NodeReadableStream | null} body
+ * @param {ProgressFn} onUploadProgress
+ * @returns {AsyncIterable<Buffer>}
+ */
+const iterateBodyWithProgress = async function* (body, onUploadProgress) {
+  if (body == null) {
+    onUploadProgress({ total: 0, loaded: 0, lengthComputable: true });
+  } else if (Buffer.isBuffer(body)) {
+    const total = body.byteLength;
+    const lengthComputable = true;
+    yield body;
+    onUploadProgress({ total, loaded: total, lengthComputable });
+  } else {
+    const total = 0;
+    const lengthComputable = false;
+    let loaded = 0;
+    for await (const chunk of body) {
+      loaded = chunk.byteLength;
+      yield chunk;
+      onUploadProgress({ total, loaded, lengthComputable });
+    }
+  }
+};
 
-module.exports = fetch
+module.exports = {
+  fetch,
+  Request,
+  Headers,
+};